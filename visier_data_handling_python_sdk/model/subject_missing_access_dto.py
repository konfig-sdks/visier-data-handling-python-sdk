# coding: utf-8

"""
    Visier Data and Job Handling APIs

    Visier APIs for data and job handling

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_data_handling_python_sdk import schemas  # noqa: F401


class SubjectMissingAccessDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class subject(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'enum'
                    enum_value_to_name = {
                        "Employee": "EMPLOYEE",
                        "Employee_Budgeted_Compensation": "EMPLOYEE_BUDGETED_COMPENSATION",
                        "Employment_Start": "EMPLOYMENT_START",
                        "Employment_Exit": "EMPLOYMENT_EXIT",
                        "Absenteeism": "ABSENTEEISM",
                        "Supervisory": "SUPERVISORY",
                        "Organization": "ORGANIZATION",
                        "Compensation_Payout": "COMPENSATION_PAYOUT",
                        "CustomSubject": "CUSTOM_SUBJECT",
                        "TestConnectionSubject": "TEST_CONNECTION_SUBJECT",
                        "Internal_Placement": "INTERNAL_PLACEMENT",
                        "Pay_Change": "PAY_CHANGE",
                        "Hire": "HIRE",
                        "Applicant": "APPLICANT",
                        "Candidate": "CANDIDATE",
                        "Requisition": "REQUISITION",
                    }
                
                @schemas.classproperty
                def EMPLOYEE(cls):
                    return cls("Employee")
                
                @schemas.classproperty
                def EMPLOYEE_BUDGETED_COMPENSATION(cls):
                    return cls("Employee_Budgeted_Compensation")
                
                @schemas.classproperty
                def EMPLOYMENT_START(cls):
                    return cls("Employment_Start")
                
                @schemas.classproperty
                def EMPLOYMENT_EXIT(cls):
                    return cls("Employment_Exit")
                
                @schemas.classproperty
                def ABSENTEEISM(cls):
                    return cls("Absenteeism")
                
                @schemas.classproperty
                def SUPERVISORY(cls):
                    return cls("Supervisory")
                
                @schemas.classproperty
                def ORGANIZATION(cls):
                    return cls("Organization")
                
                @schemas.classproperty
                def COMPENSATION_PAYOUT(cls):
                    return cls("Compensation_Payout")
                
                @schemas.classproperty
                def CUSTOM_SUBJECT(cls):
                    return cls("CustomSubject")
                
                @schemas.classproperty
                def TEST_CONNECTION_SUBJECT(cls):
                    return cls("TestConnectionSubject")
                
                @schemas.classproperty
                def INTERNAL_PLACEMENT(cls):
                    return cls("Internal_Placement")
                
                @schemas.classproperty
                def PAY_CHANGE(cls):
                    return cls("Pay_Change")
                
                @schemas.classproperty
                def HIRE(cls):
                    return cls("Hire")
                
                @schemas.classproperty
                def APPLICANT(cls):
                    return cls("Applicant")
                
                @schemas.classproperty
                def CANDIDATE(cls):
                    return cls("Candidate")
                
                @schemas.classproperty
                def REQUISITION(cls):
                    return cls("Requisition")
        
            @staticmethod
            def attributes() -> typing.Type['SubjectMissingAccessDTOAttributes']:
                return SubjectMissingAccessDTOAttributes
            __annotations__ = {
                "subject": subject,
                "attributes": attributes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'SubjectMissingAccessDTOAttributes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["subject", "attributes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['SubjectMissingAccessDTOAttributes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subject", "attributes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        attributes: typing.Union['SubjectMissingAccessDTOAttributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubjectMissingAccessDTO':
        return super().__new__(
            cls,
            *args,
            subject=subject,
            attributes=attributes,
            _configuration=_configuration,
            **kwargs,
        )

from visier_data_handling_python_sdk.model.subject_missing_access_dto_attributes import SubjectMissingAccessDTOAttributes
