# coding: utf-8

"""
    Visier Data and Job Handling APIs

    Visier APIs for data and job handling

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_data_handling_python_sdk import schemas  # noqa: F401


class DataProviderAuthParamsDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            tenantDomainName = schemas.StrSchema
            
            
            class provider(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BAMBOO(cls):
                    return cls("Bamboo")
                
                @schemas.classproperty
                def GOOGLE_SHEETS(cls):
                    return cls("GoogleSheets")
                
                @schemas.classproperty
                def GREENHOUSE(cls):
                    return cls("Greenhouse")
                
                @schemas.classproperty
                def JIRA(cls):
                    return cls("Jira")
                
                @schemas.classproperty
                def LEVER(cls):
                    return cls("Lever")
                
                @schemas.classproperty
                def NAMELY(cls):
                    return cls("Namely")
                
                @schemas.classproperty
                def QUALTRICS(cls):
                    return cls("Qualtrics")
                
                @schemas.classproperty
                def SALESFORCE(cls):
                    return cls("Salesforce")
                
                @schemas.classproperty
                def UKG(cls):
                    return cls("UKG")
                
                @schemas.classproperty
                def WORKDAY(cls):
                    return cls("Workday")
                
                @schemas.classproperty
                def ICIMS(cls):
                    return cls("Icims")
                
                @schemas.classproperty
                def SERVICE_NOW(cls):
                    return cls("ServiceNow")
                
                @schemas.classproperty
                def JDBC(cls):
                    return cls("Jdbc")
                
                @schemas.classproperty
                def BASIC_S3(cls):
                    return cls("BasicS3")
                
                @schemas.classproperty
                def INTERNAL_S3(cls):
                    return cls("InternalS3")
                
                @schemas.classproperty
                def COPY_S3(cls):
                    return cls("CopyS3")
                
                @schemas.classproperty
                def REDSHIFT(cls):
                    return cls("Redshift")
                
                @schemas.classproperty
                def SNOWFLAKE(cls):
                    return cls("Snowflake")
                
                @schemas.classproperty
                def BIG_QUERY(cls):
                    return cls("BigQuery")
                
                @schemas.classproperty
                def SQL_SERVER(cls):
                    return cls("SqlServer")
                
                @schemas.classproperty
                def DIMENSIONS(cls):
                    return cls("Dimensions")
                
                @schemas.classproperty
                def ICIMS_PARTNER_PROVIDER_REDSHIFT(cls):
                    return cls("IcimsPartnerProviderRedshift")
                
                @schemas.classproperty
                def WILLOW(cls):
                    return cls("Willow")
                
                @schemas.classproperty
                def SUCCESS_FACTORS(cls):
                    return cls("SuccessFactors")
                
                @schemas.classproperty
                def ICIMS_V2(cls):
                    return cls("IcimsV2")
                
                @schemas.classproperty
                def ADP(cls):
                    return cls("ADP")
                
                @schemas.classproperty
                def WORKDAY_V2(cls):
                    return cls("WorkdayV2")
                
                @schemas.classproperty
                def SERVICE_NOW_V2(cls):
                    return cls("ServiceNowV2")
                
                @schemas.classproperty
                def MEDALLIA(cls):
                    return cls("Medallia")
                
                @schemas.classproperty
                def FUSION(cls):
                    return cls("Fusion")
                
                @schemas.classproperty
                def SALESFORCE_V2(cls):
                    return cls("SalesforceV2")
                
                @schemas.classproperty
                def GONG(cls):
                    return cls("Gong")
                
                @schemas.classproperty
                def ZOOM(cls):
                    return cls("Zoom")
                
                @schemas.classproperty
                def GOOGLE_CALENDAR(cls):
                    return cls("GoogleCalendar")
                
                @schemas.classproperty
                def UKGV2(cls):
                    return cls("UKGV2")
                
                @schemas.classproperty
                def DAYFORCE_V2(cls):
                    return cls("DayforceV2")
                
                @schemas.classproperty
                def GOOGLE_ACTIVITY_REPORT(cls):
                    return cls("GoogleActivityReport")
                
                @schemas.classproperty
                def SLACK(cls):
                    return cls("Slack")
                
                @schemas.classproperty
                def MY_SQL(cls):
                    return cls("MySql")
                
                @schemas.classproperty
                def WORKDAY_RAAS(cls):
                    return cls("WorkdayRaas")
                
                @schemas.classproperty
                def MICROSOFT365(cls):
                    return cls("Microsoft365")
                
                @schemas.classproperty
                def GOOGLE_WORKSPACE(cls):
                    return cls("GoogleWorkspace")
                
                @schemas.classproperty
                def ORACLE_DB(cls):
                    return cls("OracleDb")
                
                @schemas.classproperty
                def SMART_RECRUITERS(cls):
                    return cls("SmartRecruiters")
        
            @staticmethod
            def bambooAuthParams() -> typing.Type['BambooAuthParamsDTO']:
                return BambooAuthParamsDTO
        
            @staticmethod
            def greenhouseAuthParams() -> typing.Type['GreenhouseAuthParamsDTO']:
                return GreenhouseAuthParamsDTO
        
            @staticmethod
            def googleSheetsAuthParams() -> typing.Type['GoogleSheetsAuthParamsDTO']:
                return GoogleSheetsAuthParamsDTO
        
            @staticmethod
            def jiraAuthParams() -> typing.Type['JiraAuthParamsDTO']:
                return JiraAuthParamsDTO
        
            @staticmethod
            def leverAuthParams() -> typing.Type['LeverAuthParamsDTO']:
                return LeverAuthParamsDTO
        
            @staticmethod
            def namelyAuthParams() -> typing.Type['NamelyAuthParamsDTO']:
                return NamelyAuthParamsDTO
        
            @staticmethod
            def qualtricsAuthParams() -> typing.Type['QualtricsAuthParamsDTO']:
                return QualtricsAuthParamsDTO
        
            @staticmethod
            def salesforceAuthParams() -> typing.Type['SalesforceAuthParamsDTO']:
                return SalesforceAuthParamsDTO
        
            @staticmethod
            def ultimateAuthParams() -> typing.Type['UltimateAuthParamsDTO']:
                return UltimateAuthParamsDTO
        
            @staticmethod
            def workdayAuthParams() -> typing.Type['WorkdayAuthParamsDTO']:
                return WorkdayAuthParamsDTO
        
            @staticmethod
            def icimsAuthParams() -> typing.Type['IcimsAuthParamsDTO']:
                return IcimsAuthParamsDTO
        
            @staticmethod
            def serviceNowAuthParams() -> typing.Type['ServiceNowAuthParamsDTO']:
                return ServiceNowAuthParamsDTO
        
            @staticmethod
            def jdbcAuthParams() -> typing.Type['JdbcAuthParamsDTO']:
                return JdbcAuthParamsDTO
        
            @staticmethod
            def s3AuthParams() -> typing.Type['BasicS3AuthParamsDTO']:
                return BasicS3AuthParamsDTO
        
            @staticmethod
            def internalS3AuthParams() -> typing.Type['InternalS3AuthParamsDTO']:
                return InternalS3AuthParamsDTO
        
            @staticmethod
            def copyS3AuthParams() -> typing.Type['CopyS3AuthParamsDTO']:
                return CopyS3AuthParamsDTO
        
            @staticmethod
            def redshiftAuthParams() -> typing.Type['RedshiftAuthParamsDTO']:
                return RedshiftAuthParamsDTO
        
            @staticmethod
            def snowflakeAuthParams() -> typing.Type['SnowflakeAuthParamsDTO']:
                return SnowflakeAuthParamsDTO
        
            @staticmethod
            def bigQueryAuthParams() -> typing.Type['BigQueryAuthParamsDTO']:
                return BigQueryAuthParamsDTO
        
            @staticmethod
            def sqlServerAuthParams() -> typing.Type['SqlServerAuthParamsDTO']:
                return SqlServerAuthParamsDTO
        
            @staticmethod
            def dimensionsAuthParams() -> typing.Type['DimensionsAuthParamsDTO']:
                return DimensionsAuthParamsDTO
        
            @staticmethod
            def willowAuthParams() -> typing.Type['WillowAuthParamsDTO']:
                return WillowAuthParamsDTO
            emptyAuthParams = schemas.DictSchema
        
            @staticmethod
            def successFactorsAuthParams() -> typing.Type['SuccessFactorsAuthParamsDTO']:
                return SuccessFactorsAuthParamsDTO
        
            @staticmethod
            def fusionAuthParams() -> typing.Type['FusionAuthParamsDTO']:
                return FusionAuthParamsDTO
        
            @staticmethod
            def adpAuthParams() -> typing.Type['AdpAuthParamsDTO']:
                return AdpAuthParamsDTO
        
            @staticmethod
            def medalliaAuthParams() -> typing.Type['MedalliaAuthParamsDTO']:
                return MedalliaAuthParamsDTO
        
            @staticmethod
            def salesforceV2AuthParams() -> typing.Type['SalesforceV2AuthParamsDTO']:
                return SalesforceV2AuthParamsDTO
        
            @staticmethod
            def gongAuthParams() -> typing.Type['GongAuthParamsDTO']:
                return GongAuthParamsDTO
        
            @staticmethod
            def zoomAuthParams() -> typing.Type['ZoomAuthParamsDTO']:
                return ZoomAuthParamsDTO
        
            @staticmethod
            def dayforceV2AuthParams() -> typing.Type['DayforceV2AuthParamsDTO']:
                return DayforceV2AuthParamsDTO
        
            @staticmethod
            def slackAuthParams() -> typing.Type['SlackAuthParamsDTO']:
                return SlackAuthParamsDTO
        
            @staticmethod
            def mySqlAuthParams() -> typing.Type['MySqlAuthParamsDTO']:
                return MySqlAuthParamsDTO
        
            @staticmethod
            def workdayRaasAuthParams() -> typing.Type['WorkdayRaasAuthParamsDTO']:
                return WorkdayRaasAuthParamsDTO
        
            @staticmethod
            def ms365AuthParams() -> typing.Type['Microsoft365AuthParamsDTO']:
                return Microsoft365AuthParamsDTO
        
            @staticmethod
            def googleWorkspaceAuthParams() -> typing.Type['GoogleWorkspaceAuthParamsDTO']:
                return GoogleWorkspaceAuthParamsDTO
        
            @staticmethod
            def oracleDbAuthParams() -> typing.Type['OracleDbAuthParamsDTO']:
                return OracleDbAuthParamsDTO
            hasUpdates = schemas.BoolSchema
            
            
            class authContext(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DEFAULT_DATA_EXTRACTION(cls):
                    return cls("DefaultDataExtraction")
                
                @schemas.classproperty
                def WORKPLACE_DYNAMICS_DATA_EXTRACTION(cls):
                    return cls("WorkplaceDynamicsDataExtraction")
                
                @schemas.classproperty
                def NOTIFICATION(cls):
                    return cls("Notification")
            __annotations__ = {
                "tenantDomainName": tenantDomainName,
                "provider": provider,
                "bambooAuthParams": bambooAuthParams,
                "greenhouseAuthParams": greenhouseAuthParams,
                "googleSheetsAuthParams": googleSheetsAuthParams,
                "jiraAuthParams": jiraAuthParams,
                "leverAuthParams": leverAuthParams,
                "namelyAuthParams": namelyAuthParams,
                "qualtricsAuthParams": qualtricsAuthParams,
                "salesforceAuthParams": salesforceAuthParams,
                "ultimateAuthParams": ultimateAuthParams,
                "workdayAuthParams": workdayAuthParams,
                "icimsAuthParams": icimsAuthParams,
                "serviceNowAuthParams": serviceNowAuthParams,
                "jdbcAuthParams": jdbcAuthParams,
                "s3AuthParams": s3AuthParams,
                "internalS3AuthParams": internalS3AuthParams,
                "copyS3AuthParams": copyS3AuthParams,
                "redshiftAuthParams": redshiftAuthParams,
                "snowflakeAuthParams": snowflakeAuthParams,
                "bigQueryAuthParams": bigQueryAuthParams,
                "sqlServerAuthParams": sqlServerAuthParams,
                "dimensionsAuthParams": dimensionsAuthParams,
                "willowAuthParams": willowAuthParams,
                "emptyAuthParams": emptyAuthParams,
                "successFactorsAuthParams": successFactorsAuthParams,
                "fusionAuthParams": fusionAuthParams,
                "adpAuthParams": adpAuthParams,
                "medalliaAuthParams": medalliaAuthParams,
                "salesforceV2AuthParams": salesforceV2AuthParams,
                "gongAuthParams": gongAuthParams,
                "zoomAuthParams": zoomAuthParams,
                "dayforceV2AuthParams": dayforceV2AuthParams,
                "slackAuthParams": slackAuthParams,
                "mySqlAuthParams": mySqlAuthParams,
                "workdayRaasAuthParams": workdayRaasAuthParams,
                "ms365AuthParams": ms365AuthParams,
                "googleWorkspaceAuthParams": googleWorkspaceAuthParams,
                "oracleDbAuthParams": oracleDbAuthParams,
                "hasUpdates": hasUpdates,
                "authContext": authContext,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantDomainName"]) -> MetaOapg.properties.tenantDomainName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bambooAuthParams"]) -> 'BambooAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["greenhouseAuthParams"]) -> 'GreenhouseAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["googleSheetsAuthParams"]) -> 'GoogleSheetsAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jiraAuthParams"]) -> 'JiraAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leverAuthParams"]) -> 'LeverAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namelyAuthParams"]) -> 'NamelyAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualtricsAuthParams"]) -> 'QualtricsAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salesforceAuthParams"]) -> 'SalesforceAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ultimateAuthParams"]) -> 'UltimateAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workdayAuthParams"]) -> 'WorkdayAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icimsAuthParams"]) -> 'IcimsAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceNowAuthParams"]) -> 'ServiceNowAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jdbcAuthParams"]) -> 'JdbcAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["s3AuthParams"]) -> 'BasicS3AuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalS3AuthParams"]) -> 'InternalS3AuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copyS3AuthParams"]) -> 'CopyS3AuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redshiftAuthParams"]) -> 'RedshiftAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeAuthParams"]) -> 'SnowflakeAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bigQueryAuthParams"]) -> 'BigQueryAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sqlServerAuthParams"]) -> 'SqlServerAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dimensionsAuthParams"]) -> 'DimensionsAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["willowAuthParams"]) -> 'WillowAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emptyAuthParams"]) -> MetaOapg.properties.emptyAuthParams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successFactorsAuthParams"]) -> 'SuccessFactorsAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fusionAuthParams"]) -> 'FusionAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adpAuthParams"]) -> 'AdpAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medalliaAuthParams"]) -> 'MedalliaAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salesforceV2AuthParams"]) -> 'SalesforceV2AuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gongAuthParams"]) -> 'GongAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoomAuthParams"]) -> 'ZoomAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayforceV2AuthParams"]) -> 'DayforceV2AuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slackAuthParams"]) -> 'SlackAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mySqlAuthParams"]) -> 'MySqlAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workdayRaasAuthParams"]) -> 'WorkdayRaasAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ms365AuthParams"]) -> 'Microsoft365AuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["googleWorkspaceAuthParams"]) -> 'GoogleWorkspaceAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oracleDbAuthParams"]) -> 'OracleDbAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasUpdates"]) -> MetaOapg.properties.hasUpdates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authContext"]) -> MetaOapg.properties.authContext: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tenantDomainName", "provider", "bambooAuthParams", "greenhouseAuthParams", "googleSheetsAuthParams", "jiraAuthParams", "leverAuthParams", "namelyAuthParams", "qualtricsAuthParams", "salesforceAuthParams", "ultimateAuthParams", "workdayAuthParams", "icimsAuthParams", "serviceNowAuthParams", "jdbcAuthParams", "s3AuthParams", "internalS3AuthParams", "copyS3AuthParams", "redshiftAuthParams", "snowflakeAuthParams", "bigQueryAuthParams", "sqlServerAuthParams", "dimensionsAuthParams", "willowAuthParams", "emptyAuthParams", "successFactorsAuthParams", "fusionAuthParams", "adpAuthParams", "medalliaAuthParams", "salesforceV2AuthParams", "gongAuthParams", "zoomAuthParams", "dayforceV2AuthParams", "slackAuthParams", "mySqlAuthParams", "workdayRaasAuthParams", "ms365AuthParams", "googleWorkspaceAuthParams", "oracleDbAuthParams", "hasUpdates", "authContext", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantDomainName"]) -> typing.Union[MetaOapg.properties.tenantDomainName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> typing.Union[MetaOapg.properties.provider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bambooAuthParams"]) -> typing.Union['BambooAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["greenhouseAuthParams"]) -> typing.Union['GreenhouseAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["googleSheetsAuthParams"]) -> typing.Union['GoogleSheetsAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jiraAuthParams"]) -> typing.Union['JiraAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leverAuthParams"]) -> typing.Union['LeverAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namelyAuthParams"]) -> typing.Union['NamelyAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualtricsAuthParams"]) -> typing.Union['QualtricsAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salesforceAuthParams"]) -> typing.Union['SalesforceAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ultimateAuthParams"]) -> typing.Union['UltimateAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workdayAuthParams"]) -> typing.Union['WorkdayAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icimsAuthParams"]) -> typing.Union['IcimsAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceNowAuthParams"]) -> typing.Union['ServiceNowAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jdbcAuthParams"]) -> typing.Union['JdbcAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["s3AuthParams"]) -> typing.Union['BasicS3AuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalS3AuthParams"]) -> typing.Union['InternalS3AuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copyS3AuthParams"]) -> typing.Union['CopyS3AuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redshiftAuthParams"]) -> typing.Union['RedshiftAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeAuthParams"]) -> typing.Union['SnowflakeAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bigQueryAuthParams"]) -> typing.Union['BigQueryAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sqlServerAuthParams"]) -> typing.Union['SqlServerAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dimensionsAuthParams"]) -> typing.Union['DimensionsAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["willowAuthParams"]) -> typing.Union['WillowAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emptyAuthParams"]) -> typing.Union[MetaOapg.properties.emptyAuthParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successFactorsAuthParams"]) -> typing.Union['SuccessFactorsAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fusionAuthParams"]) -> typing.Union['FusionAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adpAuthParams"]) -> typing.Union['AdpAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medalliaAuthParams"]) -> typing.Union['MedalliaAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salesforceV2AuthParams"]) -> typing.Union['SalesforceV2AuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gongAuthParams"]) -> typing.Union['GongAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoomAuthParams"]) -> typing.Union['ZoomAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayforceV2AuthParams"]) -> typing.Union['DayforceV2AuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slackAuthParams"]) -> typing.Union['SlackAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mySqlAuthParams"]) -> typing.Union['MySqlAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workdayRaasAuthParams"]) -> typing.Union['WorkdayRaasAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ms365AuthParams"]) -> typing.Union['Microsoft365AuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["googleWorkspaceAuthParams"]) -> typing.Union['GoogleWorkspaceAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oracleDbAuthParams"]) -> typing.Union['OracleDbAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasUpdates"]) -> typing.Union[MetaOapg.properties.hasUpdates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authContext"]) -> typing.Union[MetaOapg.properties.authContext, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tenantDomainName", "provider", "bambooAuthParams", "greenhouseAuthParams", "googleSheetsAuthParams", "jiraAuthParams", "leverAuthParams", "namelyAuthParams", "qualtricsAuthParams", "salesforceAuthParams", "ultimateAuthParams", "workdayAuthParams", "icimsAuthParams", "serviceNowAuthParams", "jdbcAuthParams", "s3AuthParams", "internalS3AuthParams", "copyS3AuthParams", "redshiftAuthParams", "snowflakeAuthParams", "bigQueryAuthParams", "sqlServerAuthParams", "dimensionsAuthParams", "willowAuthParams", "emptyAuthParams", "successFactorsAuthParams", "fusionAuthParams", "adpAuthParams", "medalliaAuthParams", "salesforceV2AuthParams", "gongAuthParams", "zoomAuthParams", "dayforceV2AuthParams", "slackAuthParams", "mySqlAuthParams", "workdayRaasAuthParams", "ms365AuthParams", "googleWorkspaceAuthParams", "oracleDbAuthParams", "hasUpdates", "authContext", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tenantDomainName: typing.Union[MetaOapg.properties.tenantDomainName, str, schemas.Unset] = schemas.unset,
        provider: typing.Union[MetaOapg.properties.provider, str, schemas.Unset] = schemas.unset,
        bambooAuthParams: typing.Union['BambooAuthParamsDTO', schemas.Unset] = schemas.unset,
        greenhouseAuthParams: typing.Union['GreenhouseAuthParamsDTO', schemas.Unset] = schemas.unset,
        googleSheetsAuthParams: typing.Union['GoogleSheetsAuthParamsDTO', schemas.Unset] = schemas.unset,
        jiraAuthParams: typing.Union['JiraAuthParamsDTO', schemas.Unset] = schemas.unset,
        leverAuthParams: typing.Union['LeverAuthParamsDTO', schemas.Unset] = schemas.unset,
        namelyAuthParams: typing.Union['NamelyAuthParamsDTO', schemas.Unset] = schemas.unset,
        qualtricsAuthParams: typing.Union['QualtricsAuthParamsDTO', schemas.Unset] = schemas.unset,
        salesforceAuthParams: typing.Union['SalesforceAuthParamsDTO', schemas.Unset] = schemas.unset,
        ultimateAuthParams: typing.Union['UltimateAuthParamsDTO', schemas.Unset] = schemas.unset,
        workdayAuthParams: typing.Union['WorkdayAuthParamsDTO', schemas.Unset] = schemas.unset,
        icimsAuthParams: typing.Union['IcimsAuthParamsDTO', schemas.Unset] = schemas.unset,
        serviceNowAuthParams: typing.Union['ServiceNowAuthParamsDTO', schemas.Unset] = schemas.unset,
        jdbcAuthParams: typing.Union['JdbcAuthParamsDTO', schemas.Unset] = schemas.unset,
        s3AuthParams: typing.Union['BasicS3AuthParamsDTO', schemas.Unset] = schemas.unset,
        internalS3AuthParams: typing.Union['InternalS3AuthParamsDTO', schemas.Unset] = schemas.unset,
        copyS3AuthParams: typing.Union['CopyS3AuthParamsDTO', schemas.Unset] = schemas.unset,
        redshiftAuthParams: typing.Union['RedshiftAuthParamsDTO', schemas.Unset] = schemas.unset,
        snowflakeAuthParams: typing.Union['SnowflakeAuthParamsDTO', schemas.Unset] = schemas.unset,
        bigQueryAuthParams: typing.Union['BigQueryAuthParamsDTO', schemas.Unset] = schemas.unset,
        sqlServerAuthParams: typing.Union['SqlServerAuthParamsDTO', schemas.Unset] = schemas.unset,
        dimensionsAuthParams: typing.Union['DimensionsAuthParamsDTO', schemas.Unset] = schemas.unset,
        willowAuthParams: typing.Union['WillowAuthParamsDTO', schemas.Unset] = schemas.unset,
        emptyAuthParams: typing.Union[MetaOapg.properties.emptyAuthParams, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        successFactorsAuthParams: typing.Union['SuccessFactorsAuthParamsDTO', schemas.Unset] = schemas.unset,
        fusionAuthParams: typing.Union['FusionAuthParamsDTO', schemas.Unset] = schemas.unset,
        adpAuthParams: typing.Union['AdpAuthParamsDTO', schemas.Unset] = schemas.unset,
        medalliaAuthParams: typing.Union['MedalliaAuthParamsDTO', schemas.Unset] = schemas.unset,
        salesforceV2AuthParams: typing.Union['SalesforceV2AuthParamsDTO', schemas.Unset] = schemas.unset,
        gongAuthParams: typing.Union['GongAuthParamsDTO', schemas.Unset] = schemas.unset,
        zoomAuthParams: typing.Union['ZoomAuthParamsDTO', schemas.Unset] = schemas.unset,
        dayforceV2AuthParams: typing.Union['DayforceV2AuthParamsDTO', schemas.Unset] = schemas.unset,
        slackAuthParams: typing.Union['SlackAuthParamsDTO', schemas.Unset] = schemas.unset,
        mySqlAuthParams: typing.Union['MySqlAuthParamsDTO', schemas.Unset] = schemas.unset,
        workdayRaasAuthParams: typing.Union['WorkdayRaasAuthParamsDTO', schemas.Unset] = schemas.unset,
        ms365AuthParams: typing.Union['Microsoft365AuthParamsDTO', schemas.Unset] = schemas.unset,
        googleWorkspaceAuthParams: typing.Union['GoogleWorkspaceAuthParamsDTO', schemas.Unset] = schemas.unset,
        oracleDbAuthParams: typing.Union['OracleDbAuthParamsDTO', schemas.Unset] = schemas.unset,
        hasUpdates: typing.Union[MetaOapg.properties.hasUpdates, bool, schemas.Unset] = schemas.unset,
        authContext: typing.Union[MetaOapg.properties.authContext, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataProviderAuthParamsDTO':
        return super().__new__(
            cls,
            *args,
            tenantDomainName=tenantDomainName,
            provider=provider,
            bambooAuthParams=bambooAuthParams,
            greenhouseAuthParams=greenhouseAuthParams,
            googleSheetsAuthParams=googleSheetsAuthParams,
            jiraAuthParams=jiraAuthParams,
            leverAuthParams=leverAuthParams,
            namelyAuthParams=namelyAuthParams,
            qualtricsAuthParams=qualtricsAuthParams,
            salesforceAuthParams=salesforceAuthParams,
            ultimateAuthParams=ultimateAuthParams,
            workdayAuthParams=workdayAuthParams,
            icimsAuthParams=icimsAuthParams,
            serviceNowAuthParams=serviceNowAuthParams,
            jdbcAuthParams=jdbcAuthParams,
            s3AuthParams=s3AuthParams,
            internalS3AuthParams=internalS3AuthParams,
            copyS3AuthParams=copyS3AuthParams,
            redshiftAuthParams=redshiftAuthParams,
            snowflakeAuthParams=snowflakeAuthParams,
            bigQueryAuthParams=bigQueryAuthParams,
            sqlServerAuthParams=sqlServerAuthParams,
            dimensionsAuthParams=dimensionsAuthParams,
            willowAuthParams=willowAuthParams,
            emptyAuthParams=emptyAuthParams,
            successFactorsAuthParams=successFactorsAuthParams,
            fusionAuthParams=fusionAuthParams,
            adpAuthParams=adpAuthParams,
            medalliaAuthParams=medalliaAuthParams,
            salesforceV2AuthParams=salesforceV2AuthParams,
            gongAuthParams=gongAuthParams,
            zoomAuthParams=zoomAuthParams,
            dayforceV2AuthParams=dayforceV2AuthParams,
            slackAuthParams=slackAuthParams,
            mySqlAuthParams=mySqlAuthParams,
            workdayRaasAuthParams=workdayRaasAuthParams,
            ms365AuthParams=ms365AuthParams,
            googleWorkspaceAuthParams=googleWorkspaceAuthParams,
            oracleDbAuthParams=oracleDbAuthParams,
            hasUpdates=hasUpdates,
            authContext=authContext,
            _configuration=_configuration,
            **kwargs,
        )

from visier_data_handling_python_sdk.model.adp_auth_params_dto import AdpAuthParamsDTO
from visier_data_handling_python_sdk.model.bamboo_auth_params_dto import BambooAuthParamsDTO
from visier_data_handling_python_sdk.model.basic_s3_auth_params_dto import BasicS3AuthParamsDTO
from visier_data_handling_python_sdk.model.big_query_auth_params_dto import BigQueryAuthParamsDTO
from visier_data_handling_python_sdk.model.copy_s3_auth_params_dto import CopyS3AuthParamsDTO
from visier_data_handling_python_sdk.model.dayforce_v2_auth_params_dto import DayforceV2AuthParamsDTO
from visier_data_handling_python_sdk.model.dimensions_auth_params_dto import DimensionsAuthParamsDTO
from visier_data_handling_python_sdk.model.fusion_auth_params_dto import FusionAuthParamsDTO
from visier_data_handling_python_sdk.model.gong_auth_params_dto import GongAuthParamsDTO
from visier_data_handling_python_sdk.model.google_sheets_auth_params_dto import GoogleSheetsAuthParamsDTO
from visier_data_handling_python_sdk.model.google_workspace_auth_params_dto import GoogleWorkspaceAuthParamsDTO
from visier_data_handling_python_sdk.model.greenhouse_auth_params_dto import GreenhouseAuthParamsDTO
from visier_data_handling_python_sdk.model.icims_auth_params_dto import IcimsAuthParamsDTO
from visier_data_handling_python_sdk.model.internal_s3_auth_params_dto import InternalS3AuthParamsDTO
from visier_data_handling_python_sdk.model.jdbc_auth_params_dto import JdbcAuthParamsDTO
from visier_data_handling_python_sdk.model.jira_auth_params_dto import JiraAuthParamsDTO
from visier_data_handling_python_sdk.model.lever_auth_params_dto import LeverAuthParamsDTO
from visier_data_handling_python_sdk.model.medallia_auth_params_dto import MedalliaAuthParamsDTO
from visier_data_handling_python_sdk.model.microsoft365_auth_params_dto import Microsoft365AuthParamsDTO
from visier_data_handling_python_sdk.model.my_sql_auth_params_dto import MySqlAuthParamsDTO
from visier_data_handling_python_sdk.model.namely_auth_params_dto import NamelyAuthParamsDTO
from visier_data_handling_python_sdk.model.oracle_db_auth_params_dto import OracleDbAuthParamsDTO
from visier_data_handling_python_sdk.model.qualtrics_auth_params_dto import QualtricsAuthParamsDTO
from visier_data_handling_python_sdk.model.redshift_auth_params_dto import RedshiftAuthParamsDTO
from visier_data_handling_python_sdk.model.salesforce_auth_params_dto import SalesforceAuthParamsDTO
from visier_data_handling_python_sdk.model.salesforce_v2_auth_params_dto import SalesforceV2AuthParamsDTO
from visier_data_handling_python_sdk.model.service_now_auth_params_dto import ServiceNowAuthParamsDTO
from visier_data_handling_python_sdk.model.slack_auth_params_dto import SlackAuthParamsDTO
from visier_data_handling_python_sdk.model.snowflake_auth_params_dto import SnowflakeAuthParamsDTO
from visier_data_handling_python_sdk.model.sql_server_auth_params_dto import SqlServerAuthParamsDTO
from visier_data_handling_python_sdk.model.success_factors_auth_params_dto import SuccessFactorsAuthParamsDTO
from visier_data_handling_python_sdk.model.ultimate_auth_params_dto import UltimateAuthParamsDTO
from visier_data_handling_python_sdk.model.willow_auth_params_dto import WillowAuthParamsDTO
from visier_data_handling_python_sdk.model.workday_auth_params_dto import WorkdayAuthParamsDTO
from visier_data_handling_python_sdk.model.workday_raas_auth_params_dto import WorkdayRaasAuthParamsDTO
from visier_data_handling_python_sdk.model.zoom_auth_params_dto import ZoomAuthParamsDTO
