# coding: utf-8

"""
    Visier Data and Job Handling APIs

    Visier APIs for data and job handling

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_data_handling_python_sdk import schemas  # noqa: F401


class SnowflakeAuthParamsDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            accountIdentifier = schemas.StrSchema
            database = schemas.StrSchema
            schema = schemas.StrSchema
            username = schemas.StrSchema
            password = schemas.StrSchema
            warehouse = schemas.StrSchema
            privateKey = schemas.StrSchema
            __annotations__ = {
                "accountIdentifier": accountIdentifier,
                "database": database,
                "schema": schema,
                "username": username,
                "password": password,
                "warehouse": warehouse,
                "privateKey": privateKey,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountIdentifier"]) -> MetaOapg.properties.accountIdentifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["database"]) -> MetaOapg.properties.database: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schema"]) -> MetaOapg.properties.schema: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warehouse"]) -> MetaOapg.properties.warehouse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateKey"]) -> MetaOapg.properties.privateKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountIdentifier", "database", "schema", "username", "password", "warehouse", "privateKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountIdentifier"]) -> typing.Union[MetaOapg.properties.accountIdentifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["database"]) -> typing.Union[MetaOapg.properties.database, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schema"]) -> typing.Union[MetaOapg.properties.schema, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warehouse"]) -> typing.Union[MetaOapg.properties.warehouse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateKey"]) -> typing.Union[MetaOapg.properties.privateKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountIdentifier", "database", "schema", "username", "password", "warehouse", "privateKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountIdentifier: typing.Union[MetaOapg.properties.accountIdentifier, str, schemas.Unset] = schemas.unset,
        database: typing.Union[MetaOapg.properties.database, str, schemas.Unset] = schemas.unset,
        schema: typing.Union[MetaOapg.properties.schema, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        warehouse: typing.Union[MetaOapg.properties.warehouse, str, schemas.Unset] = schemas.unset,
        privateKey: typing.Union[MetaOapg.properties.privateKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SnowflakeAuthParamsDTO':
        return super().__new__(
            cls,
            *args,
            accountIdentifier=accountIdentifier,
            database=database,
            schema=schema,
            username=username,
            password=password,
            warehouse=warehouse,
            privateKey=privateKey,
            _configuration=_configuration,
            **kwargs,
        )
