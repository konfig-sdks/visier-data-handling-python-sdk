# coding: utf-8

"""
    Visier Data and Job Handling APIs

    Visier APIs for data and job handling

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_data_handling_python_sdk import schemas  # noqa: F401


class DataProviderAuthInformationDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def dataProviderAuthParams() -> typing.Type['DataProviderAuthParamsDTO']:
                return DataProviderAuthParamsDTO
        
            @staticmethod
            def dataProviderBasicInformation() -> typing.Type['DataProviderBasicInformationDTO']:
                return DataProviderBasicInformationDTO
        
            @staticmethod
            def dataProviderMetadata() -> typing.Type['DataProviderBasicMetadataDTO']:
                return DataProviderBasicMetadataDTO
            __annotations__ = {
                "dataProviderAuthParams": dataProviderAuthParams,
                "dataProviderBasicInformation": dataProviderBasicInformation,
                "dataProviderMetadata": dataProviderMetadata,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataProviderAuthParams"]) -> 'DataProviderAuthParamsDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataProviderBasicInformation"]) -> 'DataProviderBasicInformationDTO': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataProviderMetadata"]) -> 'DataProviderBasicMetadataDTO': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataProviderAuthParams", "dataProviderBasicInformation", "dataProviderMetadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataProviderAuthParams"]) -> typing.Union['DataProviderAuthParamsDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataProviderBasicInformation"]) -> typing.Union['DataProviderBasicInformationDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataProviderMetadata"]) -> typing.Union['DataProviderBasicMetadataDTO', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataProviderAuthParams", "dataProviderBasicInformation", "dataProviderMetadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataProviderAuthParams: typing.Union['DataProviderAuthParamsDTO', schemas.Unset] = schemas.unset,
        dataProviderBasicInformation: typing.Union['DataProviderBasicInformationDTO', schemas.Unset] = schemas.unset,
        dataProviderMetadata: typing.Union['DataProviderBasicMetadataDTO', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataProviderAuthInformationDTO':
        return super().__new__(
            cls,
            *args,
            dataProviderAuthParams=dataProviderAuthParams,
            dataProviderBasicInformation=dataProviderBasicInformation,
            dataProviderMetadata=dataProviderMetadata,
            _configuration=_configuration,
            **kwargs,
        )

from visier_data_handling_python_sdk.model.data_provider_auth_params_dto import DataProviderAuthParamsDTO
from visier_data_handling_python_sdk.model.data_provider_basic_information_dto import DataProviderBasicInformationDTO
from visier_data_handling_python_sdk.model.data_provider_basic_metadata_dto import DataProviderBasicMetadataDTO
