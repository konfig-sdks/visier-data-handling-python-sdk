# coding: utf-8

"""
    Visier Data and Job Handling APIs

    Visier APIs for data and job handling

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_data_handling_python_sdk import schemas  # noqa: F401


class StartExtractionModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tenants() -> typing.Type['StartExtractionModelTenants']:
                return StartExtractionModelTenants
            allTenants = schemas.BoolSchema
            overrideLastExtractionTimestamp = schemas.StrSchema
            publishDataLoadArtifacts = schemas.BoolSchema
            runProcessingJob = schemas.BoolSchema
            dataCategoryId = schemas.StrSchema
            disableArtifactGeneration = schemas.BoolSchema
            __annotations__ = {
                "tenants": tenants,
                "allTenants": allTenants,
                "overrideLastExtractionTimestamp": overrideLastExtractionTimestamp,
                "publishDataLoadArtifacts": publishDataLoadArtifacts,
                "runProcessingJob": runProcessingJob,
                "dataCategoryId": dataCategoryId,
                "disableArtifactGeneration": disableArtifactGeneration,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenants"]) -> 'StartExtractionModelTenants': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allTenants"]) -> MetaOapg.properties.allTenants: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overrideLastExtractionTimestamp"]) -> MetaOapg.properties.overrideLastExtractionTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publishDataLoadArtifacts"]) -> MetaOapg.properties.publishDataLoadArtifacts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runProcessingJob"]) -> MetaOapg.properties.runProcessingJob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataCategoryId"]) -> MetaOapg.properties.dataCategoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disableArtifactGeneration"]) -> MetaOapg.properties.disableArtifactGeneration: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tenants", "allTenants", "overrideLastExtractionTimestamp", "publishDataLoadArtifacts", "runProcessingJob", "dataCategoryId", "disableArtifactGeneration", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenants"]) -> typing.Union['StartExtractionModelTenants', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allTenants"]) -> typing.Union[MetaOapg.properties.allTenants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overrideLastExtractionTimestamp"]) -> typing.Union[MetaOapg.properties.overrideLastExtractionTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publishDataLoadArtifacts"]) -> typing.Union[MetaOapg.properties.publishDataLoadArtifacts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runProcessingJob"]) -> typing.Union[MetaOapg.properties.runProcessingJob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataCategoryId"]) -> typing.Union[MetaOapg.properties.dataCategoryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disableArtifactGeneration"]) -> typing.Union[MetaOapg.properties.disableArtifactGeneration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tenants", "allTenants", "overrideLastExtractionTimestamp", "publishDataLoadArtifacts", "runProcessingJob", "dataCategoryId", "disableArtifactGeneration", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tenants: typing.Union['StartExtractionModelTenants', schemas.Unset] = schemas.unset,
        allTenants: typing.Union[MetaOapg.properties.allTenants, bool, schemas.Unset] = schemas.unset,
        overrideLastExtractionTimestamp: typing.Union[MetaOapg.properties.overrideLastExtractionTimestamp, str, schemas.Unset] = schemas.unset,
        publishDataLoadArtifacts: typing.Union[MetaOapg.properties.publishDataLoadArtifacts, bool, schemas.Unset] = schemas.unset,
        runProcessingJob: typing.Union[MetaOapg.properties.runProcessingJob, bool, schemas.Unset] = schemas.unset,
        dataCategoryId: typing.Union[MetaOapg.properties.dataCategoryId, str, schemas.Unset] = schemas.unset,
        disableArtifactGeneration: typing.Union[MetaOapg.properties.disableArtifactGeneration, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StartExtractionModel':
        return super().__new__(
            cls,
            *args,
            tenants=tenants,
            allTenants=allTenants,
            overrideLastExtractionTimestamp=overrideLastExtractionTimestamp,
            publishDataLoadArtifacts=publishDataLoadArtifacts,
            runProcessingJob=runProcessingJob,
            dataCategoryId=dataCategoryId,
            disableArtifactGeneration=disableArtifactGeneration,
            _configuration=_configuration,
            **kwargs,
        )

from visier_data_handling_python_sdk.model.start_extraction_model_tenants import StartExtractionModelTenants
